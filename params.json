{"name":"API Query Parameter Spec","tagline":"Standardising the madness that is query parameters","body":"Let's face it - query parameters to search API endpoints are getting pretty crazy. Certain people like to use the `q` parameter, some people search by field name, some through some other bunch of standards. People look to existing APIs to help them define a consistent approach but there is no _de facto_ standard.\r\n\r\nWe here at Member get Member Company want to change that.\r\n\r\n## Query Parameters?\r\n\r\nWhat the hell are we going on about, you say?\r\n\r\n```\r\nhttps://api.example.com/users?username=steve\r\n```\r\n\r\nThis works well enough to find a user with the username of \"steve\", but an exact text match may not be what you want to find.\r\n\r\nSo without further ado, here's how we propose APIs should be queried!\r\n\r\n### An exact string match\r\n\r\n```\r\nhttps://api.example.com/users?username=steve\r\n```\r\n\r\n### A partial string match\r\n\r\n```\r\nhttps://api.example.com/users?username=*steve*\r\n```\r\n\r\n### A range of values\r\n\r\n```\r\nhttps://api.example.com/users?age=18...25\r\n```\r\n\r\n### Greater than + Lesser than (or equal to)\r\n\r\nWe use familiar operators - `>`, `<`, `>=`, `<=` (shown URI-encoded)\r\n\r\n```\r\nhttps://api.example.com/users?age%3D%3E18\r\nhttps://api.example.com/users?age%3D%3C25\r\nhttps://api.example.com/users?age%3D%3E%3D18\r\nhttps://api.example.com/users?age%3D%3C%3D25\r\n```\r\n\r\n### Sorting by a value\r\n\r\nDefault is ascending, negating with a `-` sets to descending.\r\n\r\n```\r\nhttps://api.example.com/users?order=createdAt\r\nhttps://api.example.com/users?order=-createdAt\r\n```\r\n\r\n### Amount of results\r\n\r\nA `limit=0` sets no limit.\r\n\r\n```\r\nhttps://api.example.com/users?limit=5\r\nhttps://api.example.com/users?limit=0\r\n```\r\n\r\n### Pagination\r\n\r\n```\r\nhttps://api.example.com/users?page=1&perPage=20\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}